admintest.html

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Parking Data</title>
  <link rel="stylesheet" href="adminpage.css">
</head>
<body>
  <div class="container">
    <h1>Parking Data</h1>
    <table class="slot-stats-table">
      <tr>
        <td>Bike (Spot Booking)</td>
        <td>Bike (Reserved)</td>
        <td>Car (Spot Booking)</td>
        <td>Car (Reserved)</td>
      </tr>
      <tr>
        <td><span id="bikeSpotRemaining"></span> / 40</td>
        <td><span id="bikeReservedRemaining"></span> / 10</td>
        <td><span id="carSpotRemaining"></span> / 40</td>
        <td><span id="carReservedRemaining"></span> / 10</td>
      </tr>
    </table>
    <table class="data-table" id="dataTable">
      <thead>
        <tr>
          <th>Vehicle Number</th>
          <th>Vehicle Type</th>
          <th>In Time</th>
          <th>Payment Method</th>
          <th>Slot</th>
        </tr>
      </thead>
      <tbody id="dataBody"></tbody>
    </table>
  </div>
  <script type="module" src="adminpage.js"></script>
</body>
</html>



admintest1.css

/* Reset some default browser styles */
body, h1 {
  margin: 0;
  padding: 0;
}

/* Basic styling */
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
}

.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  background-color: #ffffff;
  border-radius: 10px;
  box-shadow: 0 2px 4px rgba(4, 100, 105, 0.315);
}

h1 {
  text-align: center;
  margin-bottom: 20px;
}

.slot-stats-table {
  width: 100%;
  display: table;
  border-collapse: collapse;
  border: 1px solid #ddd;
  position: sticky;
  top: 0;
  background-color: #d2f0ff; /* Change the background color to gray */
  z-index: 1;
}

.slot-stats-table th, .slot-stats-table td {
  padding: 10px;
  text-align: left;
  border-bottom: 1px solid #ddd;
  font-size: 18px; /* Increase the font size of numbers */
}

.slot-stats-table th {
  background-color: hsl(0, 100%, 51%);
}

.data-table {
  width: 100%;
  border-collapse: collapse;
  border: 1px solid #ddd;
  margin-top: 50px;
}

.data-table th, .data-table td {
  padding: 10px;
  text-align: left;
  border-bottom: 1px solid #ddd;
  font-size: 16px; /* Increase the font size of numbers in the data table */
}

.data-table th {
  background-color: #f9f9f9;
}


admintest.js
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.3.0/firebase-app.js";
import { getDatabase, ref, onValue } from "https://www.gstatic.com/firebasejs/10.3.0/firebase-database.js";

const firebaseConfig = {
  apiKey: "AIzaSyCRraBhL8tRK0OdoQia0h2iyl0E962qrMs",
  authDomain: "parkingproject-e9f8c.firebaseapp.com",
  databaseURL: "https://parkingproject-e9f8c-default-rtdb.firebaseio.com",
  projectId: "parkingproject-e9f8c",
  storageBucket: "parkingproject-e9f8c.appspot.com",
  messagingSenderId: "301869465154",
  appId: "1:301869465154:web:743ea862a5ba02696bb7db"
};

const app = initializeApp(firebaseConfig);
const db = getDatabase();

function updateTable(data) {
  const dataBody = document.getElementById("dataBody");

  if (dataBody) {
    const newRow = document.createElement("tr");
    newRow.innerHTML = `
      <td>${data.vehicleNumber}</td>
      <td>${data.vehicleType}</td>
      <td>${data.inTime}</td>
      <td>${data.selectedPaymentOption}</td>
      <td>${data.slot}</td>
    `;

    dataBody.appendChild(newRow);
  } else {
    console.error("dataBody element not found.");
  }
}

document.addEventListener("DOMContentLoaded", () => {
  const parkingDataRef = ref(db, "parkingData");
  onValue(parkingDataRef, snapshot => {
    const data = snapshot.val();
    if (data) {
      Object.values(data).forEach(entry => {
        updateTable(entry);
      });
      calculateSlotStats(data);
    }
  });
});

function calculateSlotStats(data) {
  let totalSlots = 100; // Total slots
  let bikeSlots = 50; // Total bike slots
  let carSlots = 50; // Total car slots

  // Initialize counters for booked slots
  let totalBooked = 0;
  let bikeSpotBooked = 0;
  let bikeReservedBooked = 0;
  let carSpotBooked = 0;
  let carReservedBooked = 0;

  // Loop through the data to count booked slots
  Object.values(data).forEach(entry => {
    const slotType = entry.vehicleType === "Bike" ? "bike" : "car";
    const isReserved = entry.slot.startsWith("R");

    totalBooked++;
    if (slotType === "bike") {
      bikeSlots--;
      if (isReserved) {
        bikeReservedBooked++;
      } else {
        bikeSpotBooked++;
      }
    } else {
      carSlots--;
      if (isReserved) {
        carReservedBooked++;
      } else {
        carSpotBooked++;
      }
    }
  });

  // Calculate remaining slots
  let totalRemaining = totalSlots - totalBooked;
  let bikeSpotRemaining = bikeSlots - bikeSpotBooked;
  let bikeReservedRemaining = bikeSlots - bikeReservedBooked;
  let carSpotRemaining = carSlots - carSpotBooked;
  let carReservedRemaining = carSlots - carReservedBooked;

  // Update the slot statistics
  document.getElementById("totalRemaining").textContent = `${totalRemaining} / 100`;
  document.getElementById("bikeSpotRemaining").textContent = `${bikeSpotRemaining} / 40`;
  document.getElementById("bikeReservedRemaining").textContent = `${bikeReservedRemaining} / 10`;
  document.getElementById("carSpotRemaining").textContent = `${carSpotRemaining} / 40`;
  document.getElementById("carReservedRemaining").textContent = `${carReservedRemaining} / 10`;
}
